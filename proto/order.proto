syntax = "proto3";

package order;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/LavaJover/shvark-order-service/proto/gen;orderpb";

service OrderService {
    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse);
    rpc ApproveOrder (ApproveOrderRequest) returns (ApproveOrderResponse);
    rpc CancelOrder (CancelOrderRequest) returns (CancelOrderResponse);
    rpc OpenOrderDispute (OpenOrderDisputeRequest) returns (OpenOrderDisputeResponse);
    rpc ResolveOrderDispute (ResolveOrderDisputeRequest) returns (ResolveOrderDisputeResponse);
    rpc GetOrderByID (GetOrderByIDRequest) returns (GetOrderByIDResponse);
    rpc GetOrderByMerchantOrderID (GetOrderByMerchantOrderIDRequest) returns (GetOrderByMerchantOrderIDResponse);
    rpc GetOrdersByTraderID (GetOrdersByTraderIDRequest) returns (GetOrdersByTraderIDResponse);
    
    rpc CreateOrderDispute (CreateOrderDisputeRequest) returns (CreateOrderDisputeResponse);
    rpc AcceptOrderDispute (AcceptOrderDisputeRequest) returns (AcceptOrderDisputeResponse);
    rpc RejectOrderDispute (RejectOrderDisputeRequest) returns (RejectOrderDisputeResponse);
    rpc GetOrderDisputeInfo (GetOrderDisputeInfoRequest) returns (GetOrderDisputeInfoResponse);
    rpc FreezeOrderDispute (FreezeOrderDisputeRequest) returns (FreezeOrderDisputeResponse);
    rpc GetOrderDisputes (GetOrderDisputesRequest) returns (GetOrderDisputesResponse);

    rpc GetOrderStatistics (GetOrderStatisticsRequest) returns (GetOrderStatisticsResponse);
}

message GetOrderStatisticsRequest {
    string trader_id = 1;
    google.protobuf.Timestamp date_from = 2;
    google.protobuf.Timestamp date_to = 3;
}

message GetOrderStatisticsResponse {
    int64 total_orders = 1;
    int64 succeed_orders = 2;
    int64 canceled_orders = 3;
    int64 active_orders = 4;
    float processed_amount_fiat = 5;
    float processed_amount_crypto = 6;
    float canceled_amount_fiat = 7;
    float canceled_amount_crypto = 8;
    float income_crypto = 9;
}

message GetOrderDisputesRequest {
    int64 page = 1;
    int64 limit = 2;
    string status = 3;
}

message GetOrderDisputesResponse{
    repeated OrderDispute disputes = 1;
    Pagination pagination = 2;
}

message GetOrderByMerchantOrderIDRequest {
    string merchant_order_id = 1;
}

message GetOrderByMerchantOrderIDResponse{
    Order order = 1;
}

message FreezeOrderDisputeRequest {
    string dispute_id = 1;
}

message FreezeOrderDisputeResponse {
}

message CreateOrderDisputeRequest {
    string order_id = 1;
    string proof_url = 2;
    string dispute_reason = 3; // UNKNOWN, HAS_PAYMENT, NO_PAYMENT, INVALID_SUM
    google.protobuf.Duration ttl = 4;
    double dispute_amount_fiat = 5;
}

message CreateOrderDisputeResponse {
    string dispute_id = 1;
}

message OrderDispute {
    string dispute_id = 1;
    string order_id = 2;
    string proof_url = 3;
    string dispute_reason = 4;
    string dispute_status = 5; // open, accepted, rejected
    double dispute_amount_fiat = 6;
    double dispute_amount_crypto = 7;
    double dispute_crypto_rate = 8;
    Order order = 9;
    google.protobuf.Timestamp accept_at = 10;
}

message AcceptOrderDisputeRequest{
    string dispute_id = 1;
}

message AcceptOrderDisputeResponse{
    string message = 1;
}

message RejectOrderDisputeRequest {
    string dispute_id = 1;
}

message RejectOrderDisputeResponse{
    string message = 1;
}

message GetOrderDisputeInfoRequest {
    string dispute_id = 1;
}

message GetOrderDisputeInfoResponse {
    OrderDispute dispute = 1;
}

message OrderFilters {
    repeated string statuses = 1;
    double min_amount_fiat = 2;
    double max_amount_fiat = 3;
    google.protobuf.Timestamp date_from = 4;
    google.protobuf.Timestamp date_to = 5;
    string currency = 6;
    string order_id = 7;
    string merchant_order_id = 8;
}

message Pagination {
    int64 current_page = 1;
    int64 total_pages = 2;
    int64 total_items = 3;
    int64 items_per_page = 4;
}

message CreateOrderRequest {
    string merchant_id = 1;
    double amount_fiat = 2;
    string currency = 3;
    string country = 4;
    string client_id = 5;
    string payment_system = 6;
    google.protobuf.Timestamp expires_at = 7;
    string merchant_order_id = 8;
    int32 shuffle = 9;
    string callback_url = 10;
    string bank_code = 11;
    string nspk_code = 12;
}

message CreateOrderResponse {
    Order order = 1;
}

message ApproveOrderRequest {
    string order_id = 1;
}

message ApproveOrderResponse {
    string message = 1;
}

message CancelOrderRequest {
    string order_id = 1;
}

message CancelOrderResponse {
    string message = 1;
}

message GetOrderByIDRequest {
    string order_id = 1;
}

message GetOrderByIDResponse {
    Order order = 1;
}

message Order {
    string order_id = 1;
    string status = 2;

    BankDetail bank_detail = 3;
    double amount_fiat = 4;
    double amount_crypto = 5;
    google.protobuf.Timestamp expires_at = 6;
    string merchant_order_id = 7;
    int32 shuffle = 8;
    string client_id = 9;
    string callback_url = 10;
    double trader_reward_percent = 11;
    google.protobuf.Timestamp created_at = 12;
    google.protobuf.Timestamp updated_at = 13;
    bool recalculated = 14;
    double crypto_rub_rate = 15;
}

message GetOrdersByTraderIDRequest {
    string trader_id = 1;
    int64 page = 2;
    int64 limit = 3;
    string sort_by = 4;
    string sort_order = 5;
    OrderFilters filters = 6;
}

message GetOrdersByTraderIDResponse {
    repeated Order orders = 1;
    Pagination pagination = 2;
}

message OpenOrderDisputeRequest {
    string order_id = 1;
}

message OpenOrderDisputeResponse {
    string message = 1;
}

message ResolveOrderDisputeRequest {
    string order_id = 1;
}

message ResolveOrderDisputeResponse {
    string message = 1;
}

service TrafficService {
    rpc AddTraffic (AddTrafficRequest) returns (AddTrafficResponse);
    rpc EditTraffic (EditTrafficRequest) returns (EditTrafficResponse);
    rpc DeleteTraffic (DeleteTrafficRequest) returns (DeleteTrafficResponse);
    rpc GetTrafficRecords (GetTrafficRecordsRequest) returns (GetTrafficRecordsResponse);
    rpc DisableTraderTraffic (DisableTraderTrafficRequest) returns (DisableTraderTrafficResponse);
    rpc EnableTraderTraffic (EnableTraderTrafficRequest) returns (EnableTraderTrafficResponse);
    rpc GetTraderTrafficStatus (GetTraderTrafficStatusRequest) returns (GetTraderTrafficStatusResponse);
}

message AddTrafficRequest {
    string merchant_id = 1;
    string trader_id = 2;
    double trader_reward_percent = 3;
    double trader_priority = 4;
    bool enabled = 5;
    double platform_fee = 6;
}

message Traffic {
    string id = 1;
    string merchant_id = 2;
    string trader_id = 3;
    double trader_reward_percent = 4;
    double trader_priority = 5;
    bool enabled = 6;
    double platform_fee = 7;
}

message AddTrafficResponse {
    string message = 1;
}

message EditTrafficRequest {
    Traffic traffic = 1;
}

message EditTrafficResponse {
    string message = 1;
}

message DeleteTrafficRequest {
    string traffic_id = 1;
}

message DeleteTrafficResponse {
    string message = 1;
}

// Добавить пагинацию!!!
message GetTrafficRecordsRequest {
    int32 page = 1;
    int32 limit = 2; 
}

message GetTrafficRecordsResponse {
    repeated Traffic traffic_records = 1;
}

message DisableTraderTrafficRequest {
    string trader_id = 1;
}

message DisableTraderTrafficResponse {}

message EnableTraderTrafficRequest {
    string trader_id = 1;
}

message EnableTraderTrafficResponse {}

message GetTraderTrafficStatusRequest {
    string trader_id = 1;
}

message GetTraderTrafficStatusResponse {
    bool status = 1;
}

service BankDetailService {
    rpc CreateBankDetail (CreateBankDetailRequest) returns (CreateBankDetailResponse);
    rpc UpdateBankDetail (UpdateBankDetailRequest) returns (UpdateBankDetailResponse);
    rpc DeleteBankDetail (DeleteBankDetailRequest) returns (DeleteBankDetailResponse);
    rpc GetBankDetailByID (GetBankDetailByIDRequest) returns (GetBankDetailByIDResponse);
    rpc GetBankDetailsByTraderID (GetBankDetailsByTraderIDRequest) returns (GetBankDetailsByTraderIDResponse);
    rpc GetBankDetailsStatsByTraderID (GetBankDetailsStatsByTraderIDRequest) returns (GetBankDetailsStatsByTraderIDResponse);
}

message BankDetail {
    string bank_detail_id = 1;
    string trader_id = 2;
    string currency = 3;
    string country = 4;
    double min_amount = 5;
    double max_amount = 6;
    string bank_name = 7;
    string payment_system = 8;
    bool enabled = 9;
    google.protobuf.Duration delay = 10;
    string card_number = 11;
    string phone = 12;
    string owner = 13;
    int32  max_orders_simultaneosly = 14;
    double max_amount_day = 15;
    double max_amount_month = 16;
    double max_quantity_day = 17;
    double max_quantity_month = 18;
    string device_id = 19;
    string inflow_currency = 20;
    string bank_code = 21;
    string nspk_code = 22;
}

message CreateBankDetailRequest {
    string trader_id = 1;
    string currency = 2;
    string country = 3;
    double min_amount = 4;
    double max_amount = 5;
    string bank_name = 6;
    string payment_system = 7;
    bool enabled = 8;
    google.protobuf.Duration delay = 9;
    string card_number = 10;
    string phone = 11;
    string owner = 12;
    int32  max_orders_simultaneosly = 13;
    double max_amount_day = 14;
    double max_amount_month = 15;
    double max_quantity_day = 16;
    double max_quantity_month = 17;
    string device_id = 18;
    string inflow_currency = 19;
    string bank_code = 20;
    string nspk_code = 21;
}

message CreateBankDetailResponse {
    string bank_detail_id = 1;
}

message UpdateBankDetailRequest {
    BankDetail bank_detail = 1;
}

message UpdateBankDetailResponse {}

message GetBankDetailByIDRequest {
    string bank_detail_id = 1;
}

message GetBankDetailByIDResponse {
    BankDetail bank_detail = 1;
}

message DeleteBankDetailRequest {
    string bank_detail_id = 1;
}

message DeleteBankDetailResponse {}

message GetBankDetailsByTraderIDRequest {
    string trader_id = 1;
    int32 page = 2;
    int32 limit = 3;
    string sort_by = 4;
    string sort_order = 5;
    OrderFilters filters = 6;
}

message GetBankDetailsByTraderIDResponse {
    repeated BankDetail bank_details = 1;
    Pagination pagination = 2;
}

message BankDetailStat {
    string bank_detail_id = 1;
    int32 current_count_today = 2;
    int32 current_count_month = 3;
    double current_amount_today = 4;
    double current_amount_month = 5;
}

message GetBankDetailsStatsByTraderIDRequest {
    string trader_id = 1;
}

message GetBankDetailsStatsByTraderIDResponse {
    repeated BankDetailStat bank_detail_stat = 1;
}