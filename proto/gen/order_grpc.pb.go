// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: order.proto

package orderpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName               = "/order.OrderService/CreateOrder"
	OrderService_ApproveOrder_FullMethodName              = "/order.OrderService/ApproveOrder"
	OrderService_CancelOrder_FullMethodName               = "/order.OrderService/CancelOrder"
	OrderService_GetOrderByID_FullMethodName              = "/order.OrderService/GetOrderByID"
	OrderService_GetOrderByMerchantOrderID_FullMethodName = "/order.OrderService/GetOrderByMerchantOrderID"
	OrderService_GetOrdersByTraderID_FullMethodName       = "/order.OrderService/GetOrdersByTraderID"
	OrderService_CreateOrderDispute_FullMethodName        = "/order.OrderService/CreateOrderDispute"
	OrderService_AcceptOrderDispute_FullMethodName        = "/order.OrderService/AcceptOrderDispute"
	OrderService_RejectOrderDispute_FullMethodName        = "/order.OrderService/RejectOrderDispute"
	OrderService_GetOrderDisputeInfo_FullMethodName       = "/order.OrderService/GetOrderDisputeInfo"
	OrderService_FreezeOrderDispute_FullMethodName        = "/order.OrderService/FreezeOrderDispute"
	OrderService_GetOrderDisputes_FullMethodName          = "/order.OrderService/GetOrderDisputes"
	OrderService_GetOrderStatistics_FullMethodName        = "/order.OrderService/GetOrderStatistics"
	OrderService_GetOrders_FullMethodName                 = "/order.OrderService/GetOrders"
	OrderService_GetAllOrders_FullMethodName              = "/order.OrderService/GetAllOrders"
	OrderService_ProcessAutomaticPayment_FullMethodName   = "/order.OrderService/ProcessAutomaticPayment"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*ApproveOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error)
	GetOrderByMerchantOrderID(ctx context.Context, in *GetOrderByMerchantOrderIDRequest, opts ...grpc.CallOption) (*GetOrderByMerchantOrderIDResponse, error)
	GetOrdersByTraderID(ctx context.Context, in *GetOrdersByTraderIDRequest, opts ...grpc.CallOption) (*GetOrdersByTraderIDResponse, error)
	CreateOrderDispute(ctx context.Context, in *CreateOrderDisputeRequest, opts ...grpc.CallOption) (*CreateOrderDisputeResponse, error)
	AcceptOrderDispute(ctx context.Context, in *AcceptOrderDisputeRequest, opts ...grpc.CallOption) (*AcceptOrderDisputeResponse, error)
	RejectOrderDispute(ctx context.Context, in *RejectOrderDisputeRequest, opts ...grpc.CallOption) (*RejectOrderDisputeResponse, error)
	GetOrderDisputeInfo(ctx context.Context, in *GetOrderDisputeInfoRequest, opts ...grpc.CallOption) (*GetOrderDisputeInfoResponse, error)
	FreezeOrderDispute(ctx context.Context, in *FreezeOrderDisputeRequest, opts ...grpc.CallOption) (*FreezeOrderDisputeResponse, error)
	GetOrderDisputes(ctx context.Context, in *GetOrderDisputesRequest, opts ...grpc.CallOption) (*GetOrderDisputesResponse, error)
	GetOrderStatistics(ctx context.Context, in *GetOrderStatisticsRequest, opts ...grpc.CallOption) (*GetOrderStatisticsResponse, error)
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
	GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	ProcessAutomaticPayment(ctx context.Context, in *ProcessAutomaticPaymentRequest, opts ...grpc.CallOption) (*ProcessAutomaticPaymentResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*ApproveOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ApproveOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByID(ctx context.Context, in *GetOrderByIDRequest, opts ...grpc.CallOption) (*GetOrderByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByIDResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByMerchantOrderID(ctx context.Context, in *GetOrderByMerchantOrderIDRequest, opts ...grpc.CallOption) (*GetOrderByMerchantOrderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderByMerchantOrderIDResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderByMerchantOrderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrdersByTraderID(ctx context.Context, in *GetOrdersByTraderIDRequest, opts ...grpc.CallOption) (*GetOrdersByTraderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersByTraderIDResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrdersByTraderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderDispute(ctx context.Context, in *CreateOrderDisputeRequest, opts ...grpc.CallOption) (*CreateOrderDisputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderDisputeResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrderDispute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AcceptOrderDispute(ctx context.Context, in *AcceptOrderDisputeRequest, opts ...grpc.CallOption) (*AcceptOrderDisputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcceptOrderDisputeResponse)
	err := c.cc.Invoke(ctx, OrderService_AcceptOrderDispute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RejectOrderDispute(ctx context.Context, in *RejectOrderDisputeRequest, opts ...grpc.CallOption) (*RejectOrderDisputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectOrderDisputeResponse)
	err := c.cc.Invoke(ctx, OrderService_RejectOrderDispute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderDisputeInfo(ctx context.Context, in *GetOrderDisputeInfoRequest, opts ...grpc.CallOption) (*GetOrderDisputeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderDisputeInfoResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderDisputeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) FreezeOrderDispute(ctx context.Context, in *FreezeOrderDisputeRequest, opts ...grpc.CallOption) (*FreezeOrderDisputeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeOrderDisputeResponse)
	err := c.cc.Invoke(ctx, OrderService_FreezeOrderDispute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderDisputes(ctx context.Context, in *GetOrderDisputesRequest, opts ...grpc.CallOption) (*GetOrderDisputesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderDisputesResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderDisputes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderStatistics(ctx context.Context, in *GetOrderStatisticsRequest, opts ...grpc.CallOption) (*GetOrderStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderStatisticsResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrderStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ProcessAutomaticPayment(ctx context.Context, in *ProcessAutomaticPaymentRequest, opts ...grpc.CallOption) (*ProcessAutomaticPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessAutomaticPaymentResponse)
	err := c.cc.Invoke(ctx, OrderService_ProcessAutomaticPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
type OrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	ApproveOrder(context.Context, *ApproveOrderRequest) (*ApproveOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error)
	GetOrderByMerchantOrderID(context.Context, *GetOrderByMerchantOrderIDRequest) (*GetOrderByMerchantOrderIDResponse, error)
	GetOrdersByTraderID(context.Context, *GetOrdersByTraderIDRequest) (*GetOrdersByTraderIDResponse, error)
	CreateOrderDispute(context.Context, *CreateOrderDisputeRequest) (*CreateOrderDisputeResponse, error)
	AcceptOrderDispute(context.Context, *AcceptOrderDisputeRequest) (*AcceptOrderDisputeResponse, error)
	RejectOrderDispute(context.Context, *RejectOrderDisputeRequest) (*RejectOrderDisputeResponse, error)
	GetOrderDisputeInfo(context.Context, *GetOrderDisputeInfoRequest) (*GetOrderDisputeInfoResponse, error)
	FreezeOrderDispute(context.Context, *FreezeOrderDisputeRequest) (*FreezeOrderDisputeResponse, error)
	GetOrderDisputes(context.Context, *GetOrderDisputesRequest) (*GetOrderDisputesResponse, error)
	GetOrderStatistics(context.Context, *GetOrderStatisticsRequest) (*GetOrderStatisticsResponse, error)
	GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error)
	GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error)
	ProcessAutomaticPayment(context.Context, *ProcessAutomaticPaymentRequest) (*ProcessAutomaticPaymentResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) ApproveOrder(context.Context, *ApproveOrderRequest) (*ApproveOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByID(context.Context, *GetOrderByIDRequest) (*GetOrderByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByMerchantOrderID(context.Context, *GetOrderByMerchantOrderIDRequest) (*GetOrderByMerchantOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByMerchantOrderID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrdersByTraderID(context.Context, *GetOrdersByTraderIDRequest) (*GetOrdersByTraderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByTraderID not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderDispute(context.Context, *CreateOrderDisputeRequest) (*CreateOrderDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderDispute not implemented")
}
func (UnimplementedOrderServiceServer) AcceptOrderDispute(context.Context, *AcceptOrderDisputeRequest) (*AcceptOrderDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrderDispute not implemented")
}
func (UnimplementedOrderServiceServer) RejectOrderDispute(context.Context, *RejectOrderDisputeRequest) (*RejectOrderDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectOrderDispute not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderDisputeInfo(context.Context, *GetOrderDisputeInfoRequest) (*GetOrderDisputeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDisputeInfo not implemented")
}
func (UnimplementedOrderServiceServer) FreezeOrderDispute(context.Context, *FreezeOrderDisputeRequest) (*FreezeOrderDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeOrderDispute not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderDisputes(context.Context, *GetOrderDisputesRequest) (*GetOrderDisputesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDisputes not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderStatistics(context.Context, *GetOrderStatisticsRequest) (*GetOrderStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatistics not implemented")
}
func (UnimplementedOrderServiceServer) GetOrders(context.Context, *GetOrdersRequest) (*GetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) ProcessAutomaticPayment(context.Context, *ProcessAutomaticPaymentRequest) (*ProcessAutomaticPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAutomaticPayment not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ApproveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ApproveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ApproveOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ApproveOrder(ctx, req.(*ApproveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByID(ctx, req.(*GetOrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByMerchantOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByMerchantOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByMerchantOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderByMerchantOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByMerchantOrderID(ctx, req.(*GetOrderByMerchantOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrdersByTraderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByTraderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrdersByTraderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrdersByTraderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrdersByTraderID(ctx, req.(*GetOrdersByTraderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrderDispute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderDispute(ctx, req.(*CreateOrderDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AcceptOrderDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AcceptOrderDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_AcceptOrderDispute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AcceptOrderDispute(ctx, req.(*AcceptOrderDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RejectOrderDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectOrderDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RejectOrderDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_RejectOrderDispute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RejectOrderDispute(ctx, req.(*RejectOrderDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderDisputeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDisputeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderDisputeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderDisputeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderDisputeInfo(ctx, req.(*GetOrderDisputeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_FreezeOrderDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeOrderDisputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).FreezeOrderDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_FreezeOrderDispute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).FreezeOrderDispute(ctx, req.(*FreezeOrderDisputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderDisputes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDisputesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderDisputes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderDisputes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderDisputes(ctx, req.(*GetOrderDisputesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrderStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderStatistics(ctx, req.(*GetOrderStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrders(ctx, req.(*GetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ProcessAutomaticPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAutomaticPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ProcessAutomaticPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ProcessAutomaticPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ProcessAutomaticPayment(ctx, req.(*ProcessAutomaticPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "ApproveOrder",
			Handler:    _OrderService_ApproveOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _OrderService_GetOrderByID_Handler,
		},
		{
			MethodName: "GetOrderByMerchantOrderID",
			Handler:    _OrderService_GetOrderByMerchantOrderID_Handler,
		},
		{
			MethodName: "GetOrdersByTraderID",
			Handler:    _OrderService_GetOrdersByTraderID_Handler,
		},
		{
			MethodName: "CreateOrderDispute",
			Handler:    _OrderService_CreateOrderDispute_Handler,
		},
		{
			MethodName: "AcceptOrderDispute",
			Handler:    _OrderService_AcceptOrderDispute_Handler,
		},
		{
			MethodName: "RejectOrderDispute",
			Handler:    _OrderService_RejectOrderDispute_Handler,
		},
		{
			MethodName: "GetOrderDisputeInfo",
			Handler:    _OrderService_GetOrderDisputeInfo_Handler,
		},
		{
			MethodName: "FreezeOrderDispute",
			Handler:    _OrderService_FreezeOrderDispute_Handler,
		},
		{
			MethodName: "GetOrderDisputes",
			Handler:    _OrderService_GetOrderDisputes_Handler,
		},
		{
			MethodName: "GetOrderStatistics",
			Handler:    _OrderService_GetOrderStatistics_Handler,
		},
		{
			MethodName: "GetOrders",
			Handler:    _OrderService_GetOrders_Handler,
		},
		{
			MethodName: "GetAllOrders",
			Handler:    _OrderService_GetAllOrders_Handler,
		},
		{
			MethodName: "ProcessAutomaticPayment",
			Handler:    _OrderService_ProcessAutomaticPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

const (
	TrafficService_AddTraffic_FullMethodName                    = "/order.TrafficService/AddTraffic"
	TrafficService_EditTraffic_FullMethodName                   = "/order.TrafficService/EditTraffic"
	TrafficService_DeleteTraffic_FullMethodName                 = "/order.TrafficService/DeleteTraffic"
	TrafficService_GetTrafficRecords_FullMethodName             = "/order.TrafficService/GetTrafficRecords"
	TrafficService_DisableTraderTraffic_FullMethodName          = "/order.TrafficService/DisableTraderTraffic"
	TrafficService_EnableTraderTraffic_FullMethodName           = "/order.TrafficService/EnableTraderTraffic"
	TrafficService_GetTraderTrafficStatus_FullMethodName        = "/order.TrafficService/GetTraderTrafficStatus"
	TrafficService_SetTraderLockTrafficStatus_FullMethodName    = "/order.TrafficService/SetTraderLockTrafficStatus"
	TrafficService_SetMerchantLockTrafficStatus_FullMethodName  = "/order.TrafficService/SetMerchantLockTrafficStatus"
	TrafficService_SetManuallyLockTrafficStatus_FullMethodName  = "/order.TrafficService/SetManuallyLockTrafficStatus"
	TrafficService_SetAntifraudLockTrafficStatus_FullMethodName = "/order.TrafficService/SetAntifraudLockTrafficStatus"
	TrafficService_GetTrafficLockStatuses_FullMethodName        = "/order.TrafficService/GetTrafficLockStatuses"
	TrafficService_CheckTrafficUnlocked_FullMethodName          = "/order.TrafficService/CheckTrafficUnlocked"
)

// TrafficServiceClient is the client API for TrafficService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrafficServiceClient interface {
	AddTraffic(ctx context.Context, in *AddTrafficRequest, opts ...grpc.CallOption) (*AddTrafficResponse, error)
	EditTraffic(ctx context.Context, in *EditTrafficRequest, opts ...grpc.CallOption) (*EditTrafficResponse, error)
	DeleteTraffic(ctx context.Context, in *DeleteTrafficRequest, opts ...grpc.CallOption) (*DeleteTrafficResponse, error)
	GetTrafficRecords(ctx context.Context, in *GetTrafficRecordsRequest, opts ...grpc.CallOption) (*GetTrafficRecordsResponse, error)
	DisableTraderTraffic(ctx context.Context, in *DisableTraderTrafficRequest, opts ...grpc.CallOption) (*DisableTraderTrafficResponse, error)
	EnableTraderTraffic(ctx context.Context, in *EnableTraderTrafficRequest, opts ...grpc.CallOption) (*EnableTraderTrafficResponse, error)
	GetTraderTrafficStatus(ctx context.Context, in *GetTraderTrafficStatusRequest, opts ...grpc.CallOption) (*GetTraderTrafficStatusResponse, error)
	// Traffic control
	SetTraderLockTrafficStatus(ctx context.Context, in *SetTraderLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetTraderLockTrafficStatusResponse, error)
	SetMerchantLockTrafficStatus(ctx context.Context, in *SetMerchantLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetMerchantLockTrafficStatusResponse, error)
	SetManuallyLockTrafficStatus(ctx context.Context, in *SetManuallyLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetManuallyLockTrafficStatusResponse, error)
	SetAntifraudLockTrafficStatus(ctx context.Context, in *SetAntifraudLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetAntifraudLockTrafficStatusResponse, error)
	// Traffic monitoring
	// New lock status getting methods
	GetTrafficLockStatuses(ctx context.Context, in *GetTrafficLockStatusesRequest, opts ...grpc.CallOption) (*GetTrafficLockStatusesResponse, error)
	CheckTrafficUnlocked(ctx context.Context, in *CheckTrafficUnlockedRequest, opts ...grpc.CallOption) (*CheckTrafficUnlockedResponse, error)
}

type trafficServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrafficServiceClient(cc grpc.ClientConnInterface) TrafficServiceClient {
	return &trafficServiceClient{cc}
}

func (c *trafficServiceClient) AddTraffic(ctx context.Context, in *AddTrafficRequest, opts ...grpc.CallOption) (*AddTrafficResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTrafficResponse)
	err := c.cc.Invoke(ctx, TrafficService_AddTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) EditTraffic(ctx context.Context, in *EditTrafficRequest, opts ...grpc.CallOption) (*EditTrafficResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditTrafficResponse)
	err := c.cc.Invoke(ctx, TrafficService_EditTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) DeleteTraffic(ctx context.Context, in *DeleteTrafficRequest, opts ...grpc.CallOption) (*DeleteTrafficResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTrafficResponse)
	err := c.cc.Invoke(ctx, TrafficService_DeleteTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) GetTrafficRecords(ctx context.Context, in *GetTrafficRecordsRequest, opts ...grpc.CallOption) (*GetTrafficRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficRecordsResponse)
	err := c.cc.Invoke(ctx, TrafficService_GetTrafficRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) DisableTraderTraffic(ctx context.Context, in *DisableTraderTrafficRequest, opts ...grpc.CallOption) (*DisableTraderTrafficResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableTraderTrafficResponse)
	err := c.cc.Invoke(ctx, TrafficService_DisableTraderTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) EnableTraderTraffic(ctx context.Context, in *EnableTraderTrafficRequest, opts ...grpc.CallOption) (*EnableTraderTrafficResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableTraderTrafficResponse)
	err := c.cc.Invoke(ctx, TrafficService_EnableTraderTraffic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) GetTraderTrafficStatus(ctx context.Context, in *GetTraderTrafficStatusRequest, opts ...grpc.CallOption) (*GetTraderTrafficStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraderTrafficStatusResponse)
	err := c.cc.Invoke(ctx, TrafficService_GetTraderTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) SetTraderLockTrafficStatus(ctx context.Context, in *SetTraderLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetTraderLockTrafficStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTraderLockTrafficStatusResponse)
	err := c.cc.Invoke(ctx, TrafficService_SetTraderLockTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) SetMerchantLockTrafficStatus(ctx context.Context, in *SetMerchantLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetMerchantLockTrafficStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMerchantLockTrafficStatusResponse)
	err := c.cc.Invoke(ctx, TrafficService_SetMerchantLockTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) SetManuallyLockTrafficStatus(ctx context.Context, in *SetManuallyLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetManuallyLockTrafficStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetManuallyLockTrafficStatusResponse)
	err := c.cc.Invoke(ctx, TrafficService_SetManuallyLockTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) SetAntifraudLockTrafficStatus(ctx context.Context, in *SetAntifraudLockTrafficStatusRequest, opts ...grpc.CallOption) (*SetAntifraudLockTrafficStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAntifraudLockTrafficStatusResponse)
	err := c.cc.Invoke(ctx, TrafficService_SetAntifraudLockTrafficStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) GetTrafficLockStatuses(ctx context.Context, in *GetTrafficLockStatusesRequest, opts ...grpc.CallOption) (*GetTrafficLockStatusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrafficLockStatusesResponse)
	err := c.cc.Invoke(ctx, TrafficService_GetTrafficLockStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trafficServiceClient) CheckTrafficUnlocked(ctx context.Context, in *CheckTrafficUnlockedRequest, opts ...grpc.CallOption) (*CheckTrafficUnlockedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckTrafficUnlockedResponse)
	err := c.cc.Invoke(ctx, TrafficService_CheckTrafficUnlocked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrafficServiceServer is the server API for TrafficService service.
// All implementations must embed UnimplementedTrafficServiceServer
// for forward compatibility.
type TrafficServiceServer interface {
	AddTraffic(context.Context, *AddTrafficRequest) (*AddTrafficResponse, error)
	EditTraffic(context.Context, *EditTrafficRequest) (*EditTrafficResponse, error)
	DeleteTraffic(context.Context, *DeleteTrafficRequest) (*DeleteTrafficResponse, error)
	GetTrafficRecords(context.Context, *GetTrafficRecordsRequest) (*GetTrafficRecordsResponse, error)
	DisableTraderTraffic(context.Context, *DisableTraderTrafficRequest) (*DisableTraderTrafficResponse, error)
	EnableTraderTraffic(context.Context, *EnableTraderTrafficRequest) (*EnableTraderTrafficResponse, error)
	GetTraderTrafficStatus(context.Context, *GetTraderTrafficStatusRequest) (*GetTraderTrafficStatusResponse, error)
	// Traffic control
	SetTraderLockTrafficStatus(context.Context, *SetTraderLockTrafficStatusRequest) (*SetTraderLockTrafficStatusResponse, error)
	SetMerchantLockTrafficStatus(context.Context, *SetMerchantLockTrafficStatusRequest) (*SetMerchantLockTrafficStatusResponse, error)
	SetManuallyLockTrafficStatus(context.Context, *SetManuallyLockTrafficStatusRequest) (*SetManuallyLockTrafficStatusResponse, error)
	SetAntifraudLockTrafficStatus(context.Context, *SetAntifraudLockTrafficStatusRequest) (*SetAntifraudLockTrafficStatusResponse, error)
	// Traffic monitoring
	// New lock status getting methods
	GetTrafficLockStatuses(context.Context, *GetTrafficLockStatusesRequest) (*GetTrafficLockStatusesResponse, error)
	CheckTrafficUnlocked(context.Context, *CheckTrafficUnlockedRequest) (*CheckTrafficUnlockedResponse, error)
	mustEmbedUnimplementedTrafficServiceServer()
}

// UnimplementedTrafficServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrafficServiceServer struct{}

func (UnimplementedTrafficServiceServer) AddTraffic(context.Context, *AddTrafficRequest) (*AddTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) EditTraffic(context.Context, *EditTrafficRequest) (*EditTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) DeleteTraffic(context.Context, *DeleteTrafficRequest) (*DeleteTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) GetTrafficRecords(context.Context, *GetTrafficRecordsRequest) (*GetTrafficRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficRecords not implemented")
}
func (UnimplementedTrafficServiceServer) DisableTraderTraffic(context.Context, *DisableTraderTrafficRequest) (*DisableTraderTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTraderTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) EnableTraderTraffic(context.Context, *EnableTraderTrafficRequest) (*EnableTraderTrafficResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTraderTraffic not implemented")
}
func (UnimplementedTrafficServiceServer) GetTraderTrafficStatus(context.Context, *GetTraderTrafficStatusRequest) (*GetTraderTrafficStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraderTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) SetTraderLockTrafficStatus(context.Context, *SetTraderLockTrafficStatusRequest) (*SetTraderLockTrafficStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTraderLockTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) SetMerchantLockTrafficStatus(context.Context, *SetMerchantLockTrafficStatusRequest) (*SetMerchantLockTrafficStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMerchantLockTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) SetManuallyLockTrafficStatus(context.Context, *SetManuallyLockTrafficStatusRequest) (*SetManuallyLockTrafficStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManuallyLockTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) SetAntifraudLockTrafficStatus(context.Context, *SetAntifraudLockTrafficStatusRequest) (*SetAntifraudLockTrafficStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAntifraudLockTrafficStatus not implemented")
}
func (UnimplementedTrafficServiceServer) GetTrafficLockStatuses(context.Context, *GetTrafficLockStatusesRequest) (*GetTrafficLockStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrafficLockStatuses not implemented")
}
func (UnimplementedTrafficServiceServer) CheckTrafficUnlocked(context.Context, *CheckTrafficUnlockedRequest) (*CheckTrafficUnlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTrafficUnlocked not implemented")
}
func (UnimplementedTrafficServiceServer) mustEmbedUnimplementedTrafficServiceServer() {}
func (UnimplementedTrafficServiceServer) testEmbeddedByValue()                        {}

// UnsafeTrafficServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrafficServiceServer will
// result in compilation errors.
type UnsafeTrafficServiceServer interface {
	mustEmbedUnimplementedTrafficServiceServer()
}

func RegisterTrafficServiceServer(s grpc.ServiceRegistrar, srv TrafficServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrafficServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrafficService_ServiceDesc, srv)
}

func _TrafficService_AddTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).AddTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_AddTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).AddTraffic(ctx, req.(*AddTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_EditTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).EditTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_EditTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).EditTraffic(ctx, req.(*EditTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_DeleteTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).DeleteTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_DeleteTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).DeleteTraffic(ctx, req.(*DeleteTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_GetTrafficRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).GetTrafficRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_GetTrafficRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).GetTrafficRecords(ctx, req.(*GetTrafficRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_DisableTraderTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTraderTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).DisableTraderTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_DisableTraderTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).DisableTraderTraffic(ctx, req.(*DisableTraderTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_EnableTraderTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTraderTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).EnableTraderTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_EnableTraderTraffic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).EnableTraderTraffic(ctx, req.(*EnableTraderTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_GetTraderTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderTrafficStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).GetTraderTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_GetTraderTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).GetTraderTrafficStatus(ctx, req.(*GetTraderTrafficStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_SetTraderLockTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTraderLockTrafficStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).SetTraderLockTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_SetTraderLockTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).SetTraderLockTrafficStatus(ctx, req.(*SetTraderLockTrafficStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_SetMerchantLockTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMerchantLockTrafficStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).SetMerchantLockTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_SetMerchantLockTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).SetMerchantLockTrafficStatus(ctx, req.(*SetMerchantLockTrafficStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_SetManuallyLockTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetManuallyLockTrafficStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).SetManuallyLockTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_SetManuallyLockTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).SetManuallyLockTrafficStatus(ctx, req.(*SetManuallyLockTrafficStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_SetAntifraudLockTrafficStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAntifraudLockTrafficStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).SetAntifraudLockTrafficStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_SetAntifraudLockTrafficStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).SetAntifraudLockTrafficStatus(ctx, req.(*SetAntifraudLockTrafficStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_GetTrafficLockStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrafficLockStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).GetTrafficLockStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_GetTrafficLockStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).GetTrafficLockStatuses(ctx, req.(*GetTrafficLockStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrafficService_CheckTrafficUnlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTrafficUnlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrafficServiceServer).CheckTrafficUnlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrafficService_CheckTrafficUnlocked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrafficServiceServer).CheckTrafficUnlocked(ctx, req.(*CheckTrafficUnlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrafficService_ServiceDesc is the grpc.ServiceDesc for TrafficService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrafficService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.TrafficService",
	HandlerType: (*TrafficServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTraffic",
			Handler:    _TrafficService_AddTraffic_Handler,
		},
		{
			MethodName: "EditTraffic",
			Handler:    _TrafficService_EditTraffic_Handler,
		},
		{
			MethodName: "DeleteTraffic",
			Handler:    _TrafficService_DeleteTraffic_Handler,
		},
		{
			MethodName: "GetTrafficRecords",
			Handler:    _TrafficService_GetTrafficRecords_Handler,
		},
		{
			MethodName: "DisableTraderTraffic",
			Handler:    _TrafficService_DisableTraderTraffic_Handler,
		},
		{
			MethodName: "EnableTraderTraffic",
			Handler:    _TrafficService_EnableTraderTraffic_Handler,
		},
		{
			MethodName: "GetTraderTrafficStatus",
			Handler:    _TrafficService_GetTraderTrafficStatus_Handler,
		},
		{
			MethodName: "SetTraderLockTrafficStatus",
			Handler:    _TrafficService_SetTraderLockTrafficStatus_Handler,
		},
		{
			MethodName: "SetMerchantLockTrafficStatus",
			Handler:    _TrafficService_SetMerchantLockTrafficStatus_Handler,
		},
		{
			MethodName: "SetManuallyLockTrafficStatus",
			Handler:    _TrafficService_SetManuallyLockTrafficStatus_Handler,
		},
		{
			MethodName: "SetAntifraudLockTrafficStatus",
			Handler:    _TrafficService_SetAntifraudLockTrafficStatus_Handler,
		},
		{
			MethodName: "GetTrafficLockStatuses",
			Handler:    _TrafficService_GetTrafficLockStatuses_Handler,
		},
		{
			MethodName: "CheckTrafficUnlocked",
			Handler:    _TrafficService_CheckTrafficUnlocked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

const (
	BankDetailService_CreateBankDetail_FullMethodName              = "/order.BankDetailService/CreateBankDetail"
	BankDetailService_UpdateBankDetail_FullMethodName              = "/order.BankDetailService/UpdateBankDetail"
	BankDetailService_DeleteBankDetail_FullMethodName              = "/order.BankDetailService/DeleteBankDetail"
	BankDetailService_GetBankDetailByID_FullMethodName             = "/order.BankDetailService/GetBankDetailByID"
	BankDetailService_GetBankDetailsByTraderID_FullMethodName      = "/order.BankDetailService/GetBankDetailsByTraderID"
	BankDetailService_GetBankDetailsStatsByTraderID_FullMethodName = "/order.BankDetailService/GetBankDetailsStatsByTraderID"
	BankDetailService_GetBankDetails_FullMethodName                = "/order.BankDetailService/GetBankDetails"
)

// BankDetailServiceClient is the client API for BankDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankDetailServiceClient interface {
	CreateBankDetail(ctx context.Context, in *CreateBankDetailRequest, opts ...grpc.CallOption) (*CreateBankDetailResponse, error)
	UpdateBankDetail(ctx context.Context, in *UpdateBankDetailRequest, opts ...grpc.CallOption) (*UpdateBankDetailResponse, error)
	DeleteBankDetail(ctx context.Context, in *DeleteBankDetailRequest, opts ...grpc.CallOption) (*DeleteBankDetailResponse, error)
	GetBankDetailByID(ctx context.Context, in *GetBankDetailByIDRequest, opts ...grpc.CallOption) (*GetBankDetailByIDResponse, error)
	GetBankDetailsByTraderID(ctx context.Context, in *GetBankDetailsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsByTraderIDResponse, error)
	GetBankDetailsStatsByTraderID(ctx context.Context, in *GetBankDetailsStatsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsStatsByTraderIDResponse, error)
	GetBankDetails(ctx context.Context, in *GetBankDetailsRequest, opts ...grpc.CallOption) (*GetBankDetailsResponse, error)
}

type bankDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankDetailServiceClient(cc grpc.ClientConnInterface) BankDetailServiceClient {
	return &bankDetailServiceClient{cc}
}

func (c *bankDetailServiceClient) CreateBankDetail(ctx context.Context, in *CreateBankDetailRequest, opts ...grpc.CallOption) (*CreateBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankDetailResponse)
	err := c.cc.Invoke(ctx, BankDetailService_CreateBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) UpdateBankDetail(ctx context.Context, in *UpdateBankDetailRequest, opts ...grpc.CallOption) (*UpdateBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankDetailResponse)
	err := c.cc.Invoke(ctx, BankDetailService_UpdateBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) DeleteBankDetail(ctx context.Context, in *DeleteBankDetailRequest, opts ...grpc.CallOption) (*DeleteBankDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankDetailResponse)
	err := c.cc.Invoke(ctx, BankDetailService_DeleteBankDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) GetBankDetailByID(ctx context.Context, in *GetBankDetailByIDRequest, opts ...grpc.CallOption) (*GetBankDetailByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailByIDResponse)
	err := c.cc.Invoke(ctx, BankDetailService_GetBankDetailByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) GetBankDetailsByTraderID(ctx context.Context, in *GetBankDetailsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsByTraderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailsByTraderIDResponse)
	err := c.cc.Invoke(ctx, BankDetailService_GetBankDetailsByTraderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) GetBankDetailsStatsByTraderID(ctx context.Context, in *GetBankDetailsStatsByTraderIDRequest, opts ...grpc.CallOption) (*GetBankDetailsStatsByTraderIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailsStatsByTraderIDResponse)
	err := c.cc.Invoke(ctx, BankDetailService_GetBankDetailsStatsByTraderID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankDetailServiceClient) GetBankDetails(ctx context.Context, in *GetBankDetailsRequest, opts ...grpc.CallOption) (*GetBankDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankDetailsResponse)
	err := c.cc.Invoke(ctx, BankDetailService_GetBankDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankDetailServiceServer is the server API for BankDetailService service.
// All implementations must embed UnimplementedBankDetailServiceServer
// for forward compatibility.
type BankDetailServiceServer interface {
	CreateBankDetail(context.Context, *CreateBankDetailRequest) (*CreateBankDetailResponse, error)
	UpdateBankDetail(context.Context, *UpdateBankDetailRequest) (*UpdateBankDetailResponse, error)
	DeleteBankDetail(context.Context, *DeleteBankDetailRequest) (*DeleteBankDetailResponse, error)
	GetBankDetailByID(context.Context, *GetBankDetailByIDRequest) (*GetBankDetailByIDResponse, error)
	GetBankDetailsByTraderID(context.Context, *GetBankDetailsByTraderIDRequest) (*GetBankDetailsByTraderIDResponse, error)
	GetBankDetailsStatsByTraderID(context.Context, *GetBankDetailsStatsByTraderIDRequest) (*GetBankDetailsStatsByTraderIDResponse, error)
	GetBankDetails(context.Context, *GetBankDetailsRequest) (*GetBankDetailsResponse, error)
	mustEmbedUnimplementedBankDetailServiceServer()
}

// UnimplementedBankDetailServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankDetailServiceServer struct{}

func (UnimplementedBankDetailServiceServer) CreateBankDetail(context.Context, *CreateBankDetailRequest) (*CreateBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankDetail not implemented")
}
func (UnimplementedBankDetailServiceServer) UpdateBankDetail(context.Context, *UpdateBankDetailRequest) (*UpdateBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankDetail not implemented")
}
func (UnimplementedBankDetailServiceServer) DeleteBankDetail(context.Context, *DeleteBankDetailRequest) (*DeleteBankDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankDetail not implemented")
}
func (UnimplementedBankDetailServiceServer) GetBankDetailByID(context.Context, *GetBankDetailByIDRequest) (*GetBankDetailByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailByID not implemented")
}
func (UnimplementedBankDetailServiceServer) GetBankDetailsByTraderID(context.Context, *GetBankDetailsByTraderIDRequest) (*GetBankDetailsByTraderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailsByTraderID not implemented")
}
func (UnimplementedBankDetailServiceServer) GetBankDetailsStatsByTraderID(context.Context, *GetBankDetailsStatsByTraderIDRequest) (*GetBankDetailsStatsByTraderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetailsStatsByTraderID not implemented")
}
func (UnimplementedBankDetailServiceServer) GetBankDetails(context.Context, *GetBankDetailsRequest) (*GetBankDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankDetails not implemented")
}
func (UnimplementedBankDetailServiceServer) mustEmbedUnimplementedBankDetailServiceServer() {}
func (UnimplementedBankDetailServiceServer) testEmbeddedByValue()                           {}

// UnsafeBankDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankDetailServiceServer will
// result in compilation errors.
type UnsafeBankDetailServiceServer interface {
	mustEmbedUnimplementedBankDetailServiceServer()
}

func RegisterBankDetailServiceServer(s grpc.ServiceRegistrar, srv BankDetailServiceServer) {
	// If the following call pancis, it indicates UnimplementedBankDetailServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankDetailService_ServiceDesc, srv)
}

func _BankDetailService_CreateBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).CreateBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_CreateBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).CreateBankDetail(ctx, req.(*CreateBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_UpdateBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).UpdateBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_UpdateBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).UpdateBankDetail(ctx, req.(*UpdateBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_DeleteBankDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).DeleteBankDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_DeleteBankDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).DeleteBankDetail(ctx, req.(*DeleteBankDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_GetBankDetailByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).GetBankDetailByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_GetBankDetailByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).GetBankDetailByID(ctx, req.(*GetBankDetailByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_GetBankDetailsByTraderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailsByTraderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).GetBankDetailsByTraderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_GetBankDetailsByTraderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).GetBankDetailsByTraderID(ctx, req.(*GetBankDetailsByTraderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_GetBankDetailsStatsByTraderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailsStatsByTraderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).GetBankDetailsStatsByTraderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_GetBankDetailsStatsByTraderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).GetBankDetailsStatsByTraderID(ctx, req.(*GetBankDetailsStatsByTraderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankDetailService_GetBankDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankDetailServiceServer).GetBankDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankDetailService_GetBankDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankDetailServiceServer).GetBankDetails(ctx, req.(*GetBankDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankDetailService_ServiceDesc is the grpc.ServiceDesc for BankDetailService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankDetailService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.BankDetailService",
	HandlerType: (*BankDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankDetail",
			Handler:    _BankDetailService_CreateBankDetail_Handler,
		},
		{
			MethodName: "UpdateBankDetail",
			Handler:    _BankDetailService_UpdateBankDetail_Handler,
		},
		{
			MethodName: "DeleteBankDetail",
			Handler:    _BankDetailService_DeleteBankDetail_Handler,
		},
		{
			MethodName: "GetBankDetailByID",
			Handler:    _BankDetailService_GetBankDetailByID_Handler,
		},
		{
			MethodName: "GetBankDetailsByTraderID",
			Handler:    _BankDetailService_GetBankDetailsByTraderID_Handler,
		},
		{
			MethodName: "GetBankDetailsStatsByTraderID",
			Handler:    _BankDetailService_GetBankDetailsStatsByTraderID_Handler,
		},
		{
			MethodName: "GetBankDetails",
			Handler:    _BankDetailService_GetBankDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

const (
	TeamRelationsService_CreateTeamRelation_FullMethodName       = "/order.TeamRelationsService/CreateTeamRelation"
	TeamRelationsService_GetRelationsByTeamLeadID_FullMethodName = "/order.TeamRelationsService/GetRelationsByTeamLeadID"
	TeamRelationsService_UpdateRelationParams_FullMethodName     = "/order.TeamRelationsService/UpdateRelationParams"
	TeamRelationsService_DeleteTeamRelationship_FullMethodName   = "/order.TeamRelationsService/DeleteTeamRelationship"
)

// TeamRelationsServiceClient is the client API for TeamRelationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamRelationsServiceClient interface {
	CreateTeamRelation(ctx context.Context, in *CreateTeamRelationRequest, opts ...grpc.CallOption) (*CreateTeamRelationResponse, error)
	GetRelationsByTeamLeadID(ctx context.Context, in *GetRelationsByTeamLeadIDRequest, opts ...grpc.CallOption) (*GetRelationsByTeamLeadIDResponse, error)
	UpdateRelationParams(ctx context.Context, in *UpdateRelationParamsRequest, opts ...grpc.CallOption) (*UpdateRelationParamsResponse, error)
	DeleteTeamRelationship(ctx context.Context, in *DeleteTeamRelationshipRequest, opts ...grpc.CallOption) (*DeleteTeamRelationshipResponse, error)
}

type teamRelationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamRelationsServiceClient(cc grpc.ClientConnInterface) TeamRelationsServiceClient {
	return &teamRelationsServiceClient{cc}
}

func (c *teamRelationsServiceClient) CreateTeamRelation(ctx context.Context, in *CreateTeamRelationRequest, opts ...grpc.CallOption) (*CreateTeamRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamRelationResponse)
	err := c.cc.Invoke(ctx, TeamRelationsService_CreateTeamRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRelationsServiceClient) GetRelationsByTeamLeadID(ctx context.Context, in *GetRelationsByTeamLeadIDRequest, opts ...grpc.CallOption) (*GetRelationsByTeamLeadIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationsByTeamLeadIDResponse)
	err := c.cc.Invoke(ctx, TeamRelationsService_GetRelationsByTeamLeadID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRelationsServiceClient) UpdateRelationParams(ctx context.Context, in *UpdateRelationParamsRequest, opts ...grpc.CallOption) (*UpdateRelationParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRelationParamsResponse)
	err := c.cc.Invoke(ctx, TeamRelationsService_UpdateRelationParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamRelationsServiceClient) DeleteTeamRelationship(ctx context.Context, in *DeleteTeamRelationshipRequest, opts ...grpc.CallOption) (*DeleteTeamRelationshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamRelationshipResponse)
	err := c.cc.Invoke(ctx, TeamRelationsService_DeleteTeamRelationship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamRelationsServiceServer is the server API for TeamRelationsService service.
// All implementations must embed UnimplementedTeamRelationsServiceServer
// for forward compatibility.
type TeamRelationsServiceServer interface {
	CreateTeamRelation(context.Context, *CreateTeamRelationRequest) (*CreateTeamRelationResponse, error)
	GetRelationsByTeamLeadID(context.Context, *GetRelationsByTeamLeadIDRequest) (*GetRelationsByTeamLeadIDResponse, error)
	UpdateRelationParams(context.Context, *UpdateRelationParamsRequest) (*UpdateRelationParamsResponse, error)
	DeleteTeamRelationship(context.Context, *DeleteTeamRelationshipRequest) (*DeleteTeamRelationshipResponse, error)
	mustEmbedUnimplementedTeamRelationsServiceServer()
}

// UnimplementedTeamRelationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamRelationsServiceServer struct{}

func (UnimplementedTeamRelationsServiceServer) CreateTeamRelation(context.Context, *CreateTeamRelationRequest) (*CreateTeamRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamRelation not implemented")
}
func (UnimplementedTeamRelationsServiceServer) GetRelationsByTeamLeadID(context.Context, *GetRelationsByTeamLeadIDRequest) (*GetRelationsByTeamLeadIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationsByTeamLeadID not implemented")
}
func (UnimplementedTeamRelationsServiceServer) UpdateRelationParams(context.Context, *UpdateRelationParamsRequest) (*UpdateRelationParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelationParams not implemented")
}
func (UnimplementedTeamRelationsServiceServer) DeleteTeamRelationship(context.Context, *DeleteTeamRelationshipRequest) (*DeleteTeamRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamRelationship not implemented")
}
func (UnimplementedTeamRelationsServiceServer) mustEmbedUnimplementedTeamRelationsServiceServer() {}
func (UnimplementedTeamRelationsServiceServer) testEmbeddedByValue()                              {}

// UnsafeTeamRelationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamRelationsServiceServer will
// result in compilation errors.
type UnsafeTeamRelationsServiceServer interface {
	mustEmbedUnimplementedTeamRelationsServiceServer()
}

func RegisterTeamRelationsServiceServer(s grpc.ServiceRegistrar, srv TeamRelationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTeamRelationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TeamRelationsService_ServiceDesc, srv)
}

func _TeamRelationsService_CreateTeamRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRelationsServiceServer).CreateTeamRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRelationsService_CreateTeamRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRelationsServiceServer).CreateTeamRelation(ctx, req.(*CreateTeamRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRelationsService_GetRelationsByTeamLeadID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationsByTeamLeadIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRelationsServiceServer).GetRelationsByTeamLeadID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRelationsService_GetRelationsByTeamLeadID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRelationsServiceServer).GetRelationsByTeamLeadID(ctx, req.(*GetRelationsByTeamLeadIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRelationsService_UpdateRelationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelationParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRelationsServiceServer).UpdateRelationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRelationsService_UpdateRelationParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRelationsServiceServer).UpdateRelationParams(ctx, req.(*UpdateRelationParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamRelationsService_DeleteTeamRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamRelationsServiceServer).DeleteTeamRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TeamRelationsService_DeleteTeamRelationship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamRelationsServiceServer).DeleteTeamRelationship(ctx, req.(*DeleteTeamRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeamRelationsService_ServiceDesc is the grpc.ServiceDesc for TeamRelationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeamRelationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.TeamRelationsService",
	HandlerType: (*TeamRelationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeamRelation",
			Handler:    _TeamRelationsService_CreateTeamRelation_Handler,
		},
		{
			MethodName: "GetRelationsByTeamLeadID",
			Handler:    _TeamRelationsService_GetRelationsByTeamLeadID_Handler,
		},
		{
			MethodName: "UpdateRelationParams",
			Handler:    _TeamRelationsService_UpdateRelationParams_Handler,
		},
		{
			MethodName: "DeleteTeamRelationship",
			Handler:    _TeamRelationsService_DeleteTeamRelationship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

const (
	DeviceService_CreateDevice_FullMethodName     = "/order.DeviceService/CreateDevice"
	DeviceService_GetTraderDevices_FullMethodName = "/order.DeviceService/GetTraderDevices"
	DeviceService_DeleteDevice_FullMethodName     = "/order.DeviceService/DeleteDevice"
	DeviceService_EditDevice_FullMethodName       = "/order.DeviceService/EditDevice"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetTraderDevices(ctx context.Context, in *GetTraderDevicesRequest, opts ...grpc.CallOption) (*GetTraderDevicesResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	EditDevice(ctx context.Context, in *EditDeviceRequest, opts ...grpc.CallOption) (*EditDeviceResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetTraderDevices(ctx context.Context, in *GetTraderDevicesRequest, opts ...grpc.CallOption) (*GetTraderDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraderDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetTraderDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) EditDevice(ctx context.Context, in *EditDeviceRequest, opts ...grpc.CallOption) (*EditDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_EditDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility.
type DeviceServiceServer interface {
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	GetTraderDevices(context.Context, *GetTraderDevicesRequest) (*GetTraderDevicesResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	EditDevice(context.Context, *EditDeviceRequest) (*EditDeviceResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceServiceServer struct{}

func (UnimplementedDeviceServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) GetTraderDevices(context.Context, *GetTraderDevicesRequest) (*GetTraderDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraderDevices not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceServiceServer) EditDevice(context.Context, *EditDeviceRequest) (*EditDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDevice not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}
func (UnimplementedDeviceServiceServer) testEmbeddedByValue()                       {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetTraderDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetTraderDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetTraderDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetTraderDevices(ctx, req.(*GetTraderDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_EditDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).EditDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_EditDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).EditDevice(ctx, req.(*EditDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceService_CreateDevice_Handler,
		},
		{
			MethodName: "GetTraderDevices",
			Handler:    _DeviceService_GetTraderDevices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
		{
			MethodName: "EditDevice",
			Handler:    _DeviceService_EditDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

const (
	AntiFraudService_CheckTrader_FullMethodName           = "/order.AntiFraudService/CheckTrader"
	AntiFraudService_ProcessTraderCheck_FullMethodName    = "/order.AntiFraudService/ProcessTraderCheck"
	AntiFraudService_CreateRule_FullMethodName            = "/order.AntiFraudService/CreateRule"
	AntiFraudService_UpdateRule_FullMethodName            = "/order.AntiFraudService/UpdateRule"
	AntiFraudService_GetRules_FullMethodName              = "/order.AntiFraudService/GetRules"
	AntiFraudService_GetRule_FullMethodName               = "/order.AntiFraudService/GetRule"
	AntiFraudService_DeleteRule_FullMethodName            = "/order.AntiFraudService/DeleteRule"
	AntiFraudService_GetAuditLogs_FullMethodName          = "/order.AntiFraudService/GetAuditLogs"
	AntiFraudService_GetTraderAuditHistory_FullMethodName = "/order.AntiFraudService/GetTraderAuditHistory"
	AntiFraudService_ManualUnlock_FullMethodName          = "/order.AntiFraudService/ManualUnlock"
	AntiFraudService_ResetGracePeriod_FullMethodName      = "/order.AntiFraudService/ResetGracePeriod"
)

// AntiFraudServiceClient is the client API for AntiFraudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiFraudServiceClient interface {
	// Проверка трейдера
	CheckTrader(ctx context.Context, in *CheckTraderRequest, opts ...grpc.CallOption) (*CheckTraderResponse, error)
	ProcessTraderCheck(ctx context.Context, in *ProcessTraderCheckRequest, opts ...grpc.CallOption) (*ProcessTraderCheckResponse, error)
	// Управление правилами
	CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error)
	UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error)
	GetRules(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*GetRulesResponse, error)
	GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error)
	DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error)
	// Аудит
	GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error)
	GetTraderAuditHistory(ctx context.Context, in *GetTraderAuditHistoryRequest, opts ...grpc.CallOption) (*GetTraderAuditHistoryResponse, error)
	ManualUnlock(ctx context.Context, in *ManualUnlockRequest, opts ...grpc.CallOption) (*ManualUnlockResponse, error)
	ResetGracePeriod(ctx context.Context, in *ResetGracePeriodRequest, opts ...grpc.CallOption) (*ResetGracePeriodResponse, error)
}

type antiFraudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiFraudServiceClient(cc grpc.ClientConnInterface) AntiFraudServiceClient {
	return &antiFraudServiceClient{cc}
}

func (c *antiFraudServiceClient) CheckTrader(ctx context.Context, in *CheckTraderRequest, opts ...grpc.CallOption) (*CheckTraderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckTraderResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_CheckTrader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) ProcessTraderCheck(ctx context.Context, in *ProcessTraderCheckRequest, opts ...grpc.CallOption) (*ProcessTraderCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessTraderCheckResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_ProcessTraderCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) CreateRule(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*CreateRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRuleResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_CreateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) UpdateRule(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*UpdateRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRuleResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_UpdateRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) GetRules(ctx context.Context, in *GetRulesRequest, opts ...grpc.CallOption) (*GetRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRulesResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_GetRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) GetRule(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*GetRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRuleResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_GetRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) DeleteRule(ctx context.Context, in *DeleteRuleRequest, opts ...grpc.CallOption) (*DeleteRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRuleResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_DeleteRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) GetAuditLogs(ctx context.Context, in *GetAuditLogsRequest, opts ...grpc.CallOption) (*GetAuditLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuditLogsResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_GetAuditLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) GetTraderAuditHistory(ctx context.Context, in *GetTraderAuditHistoryRequest, opts ...grpc.CallOption) (*GetTraderAuditHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTraderAuditHistoryResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_GetTraderAuditHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) ManualUnlock(ctx context.Context, in *ManualUnlockRequest, opts ...grpc.CallOption) (*ManualUnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManualUnlockResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_ManualUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiFraudServiceClient) ResetGracePeriod(ctx context.Context, in *ResetGracePeriodRequest, opts ...grpc.CallOption) (*ResetGracePeriodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetGracePeriodResponse)
	err := c.cc.Invoke(ctx, AntiFraudService_ResetGracePeriod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiFraudServiceServer is the server API for AntiFraudService service.
// All implementations must embed UnimplementedAntiFraudServiceServer
// for forward compatibility.
type AntiFraudServiceServer interface {
	// Проверка трейдера
	CheckTrader(context.Context, *CheckTraderRequest) (*CheckTraderResponse, error)
	ProcessTraderCheck(context.Context, *ProcessTraderCheckRequest) (*ProcessTraderCheckResponse, error)
	// Управление правилами
	CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error)
	UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error)
	GetRules(context.Context, *GetRulesRequest) (*GetRulesResponse, error)
	GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error)
	DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error)
	// Аудит
	GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error)
	GetTraderAuditHistory(context.Context, *GetTraderAuditHistoryRequest) (*GetTraderAuditHistoryResponse, error)
	ManualUnlock(context.Context, *ManualUnlockRequest) (*ManualUnlockResponse, error)
	ResetGracePeriod(context.Context, *ResetGracePeriodRequest) (*ResetGracePeriodResponse, error)
	mustEmbedUnimplementedAntiFraudServiceServer()
}

// UnimplementedAntiFraudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAntiFraudServiceServer struct{}

func (UnimplementedAntiFraudServiceServer) CheckTrader(context.Context, *CheckTraderRequest) (*CheckTraderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTrader not implemented")
}
func (UnimplementedAntiFraudServiceServer) ProcessTraderCheck(context.Context, *ProcessTraderCheckRequest) (*ProcessTraderCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTraderCheck not implemented")
}
func (UnimplementedAntiFraudServiceServer) CreateRule(context.Context, *CreateRuleRequest) (*CreateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRule not implemented")
}
func (UnimplementedAntiFraudServiceServer) UpdateRule(context.Context, *UpdateRuleRequest) (*UpdateRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRule not implemented")
}
func (UnimplementedAntiFraudServiceServer) GetRules(context.Context, *GetRulesRequest) (*GetRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRules not implemented")
}
func (UnimplementedAntiFraudServiceServer) GetRule(context.Context, *GetRuleRequest) (*GetRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRule not implemented")
}
func (UnimplementedAntiFraudServiceServer) DeleteRule(context.Context, *DeleteRuleRequest) (*DeleteRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRule not implemented")
}
func (UnimplementedAntiFraudServiceServer) GetAuditLogs(context.Context, *GetAuditLogsRequest) (*GetAuditLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogs not implemented")
}
func (UnimplementedAntiFraudServiceServer) GetTraderAuditHistory(context.Context, *GetTraderAuditHistoryRequest) (*GetTraderAuditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraderAuditHistory not implemented")
}
func (UnimplementedAntiFraudServiceServer) ManualUnlock(context.Context, *ManualUnlockRequest) (*ManualUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualUnlock not implemented")
}
func (UnimplementedAntiFraudServiceServer) ResetGracePeriod(context.Context, *ResetGracePeriodRequest) (*ResetGracePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetGracePeriod not implemented")
}
func (UnimplementedAntiFraudServiceServer) mustEmbedUnimplementedAntiFraudServiceServer() {}
func (UnimplementedAntiFraudServiceServer) testEmbeddedByValue()                          {}

// UnsafeAntiFraudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiFraudServiceServer will
// result in compilation errors.
type UnsafeAntiFraudServiceServer interface {
	mustEmbedUnimplementedAntiFraudServiceServer()
}

func RegisterAntiFraudServiceServer(s grpc.ServiceRegistrar, srv AntiFraudServiceServer) {
	// If the following call pancis, it indicates UnimplementedAntiFraudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AntiFraudService_ServiceDesc, srv)
}

func _AntiFraudService_CheckTrader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTraderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).CheckTrader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_CheckTrader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).CheckTrader(ctx, req.(*CheckTraderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_ProcessTraderCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTraderCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).ProcessTraderCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_ProcessTraderCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).ProcessTraderCheck(ctx, req.(*ProcessTraderCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_CreateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).CreateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_CreateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).CreateRule(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_UpdateRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).UpdateRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_UpdateRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).UpdateRule(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_GetRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).GetRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_GetRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).GetRules(ctx, req.(*GetRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_GetRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).GetRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_GetRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).GetRule(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_DeleteRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).DeleteRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_DeleteRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).DeleteRule(ctx, req.(*DeleteRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_GetAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).GetAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_GetAuditLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).GetAuditLogs(ctx, req.(*GetAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_GetTraderAuditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraderAuditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).GetTraderAuditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_GetTraderAuditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).GetTraderAuditHistory(ctx, req.(*GetTraderAuditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_ManualUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).ManualUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_ManualUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).ManualUnlock(ctx, req.(*ManualUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiFraudService_ResetGracePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetGracePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiFraudServiceServer).ResetGracePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiFraudService_ResetGracePeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiFraudServiceServer).ResetGracePeriod(ctx, req.(*ResetGracePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiFraudService_ServiceDesc is the grpc.ServiceDesc for AntiFraudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiFraudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.AntiFraudService",
	HandlerType: (*AntiFraudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTrader",
			Handler:    _AntiFraudService_CheckTrader_Handler,
		},
		{
			MethodName: "ProcessTraderCheck",
			Handler:    _AntiFraudService_ProcessTraderCheck_Handler,
		},
		{
			MethodName: "CreateRule",
			Handler:    _AntiFraudService_CreateRule_Handler,
		},
		{
			MethodName: "UpdateRule",
			Handler:    _AntiFraudService_UpdateRule_Handler,
		},
		{
			MethodName: "GetRules",
			Handler:    _AntiFraudService_GetRules_Handler,
		},
		{
			MethodName: "GetRule",
			Handler:    _AntiFraudService_GetRule_Handler,
		},
		{
			MethodName: "DeleteRule",
			Handler:    _AntiFraudService_DeleteRule_Handler,
		},
		{
			MethodName: "GetAuditLogs",
			Handler:    _AntiFraudService_GetAuditLogs_Handler,
		},
		{
			MethodName: "GetTraderAuditHistory",
			Handler:    _AntiFraudService_GetTraderAuditHistory_Handler,
		},
		{
			MethodName: "ManualUnlock",
			Handler:    _AntiFraudService_ManualUnlock_Handler,
		},
		{
			MethodName: "ResetGracePeriod",
			Handler:    _AntiFraudService_ResetGracePeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
