package usdt

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"
)

type OrderbookResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		Symbol    string     `json:"s"`
		Bids      [][]string `json:"b"`
		Asks      [][]string `json:"a"`
		Timestamp int64      `json:"ts"`
		UpdateID  int64      `json:"u"`
	} `json:"result"`
	Time int64 `json:"time"`
}

type TickerResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		Category string `json:"category"`
		List     []struct {
			Symbol      string `json:"symbol"`
			LastPrice   string `json:"lastPrice"`
			Bid1Price   string `json:"bid1Price"`
			Ask1Price   string `json:"ask1Price"`
			Volume24h   string `json:"volume24h"`
			Price24hPcnt string `json:"price24hPcnt"`
		} `json:"list"`
	} `json:"result"`
}

type InstrumentsResponse struct {
	RetCode int    `json:"retCode"`
	RetMsg  string `json:"retMsg"`
	Result  struct {
		Category string `json:"category"`
		List     []struct {
			Symbol     string `json:"symbol"`
			BaseCoin   string `json:"baseCoin"`
			QuoteCoin  string `json:"quoteCoin"`
			Status     string `json:"status"`
		} `json:"list"`
	} `json:"result"`
}

const (
	BYBIT_API_BASE = "https://api.bybit.com"
	ORDERBOOK_ENDPOINT = "/v5/market/orderbook"
	TICKER_ENDPOINT = "/v5/market/tickers"
	INSTRUMENTS_ENDPOINT = "/v5/market/instruments-info"
)

// HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
var httpClient = &http.Client{
	Timeout: 10 * time.Second,
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
func makeRequest(url string) (*http.Response, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("User-Agent", "RUB-USD-Calculator/1.0")
	req.Header.Set("Accept", "application/json")

	return httpClient.Do(req)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ RUB –ø–∞—Ä –≤ —Å–ø–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
func findRubPairs() ([]string, error) {
	url := fmt.Sprintf("%s%s?category=spot", BYBIT_API_BASE, INSTRUMENTS_ENDPOINT)

	resp, err := makeRequest(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	var instruments InstrumentsResponse
	if err := json.NewDecoder(resp.Body).Decode(&instruments); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	if instruments.RetCode != 0 {
		return nil, fmt.Errorf("API –æ—à–∏–±–∫–∞: %s", instruments.RetMsg)
	}

	var rubPairs []string
	for _, instrument := range instruments.Result.List {
		symbol := strings.ToUpper(instrument.Symbol)
		if strings.Contains(symbol, "RUB") && instrument.Status == "Trading" {
			rubPairs = append(rubPairs, symbol)
		}
	}

	return rubPairs, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ (orderbook)
func getOrderbook(symbol string, category string) (*OrderbookResponse, error) {
	url := fmt.Sprintf("%s%s?category=%s&symbol=%s&limit=10", 
		BYBIT_API_BASE, ORDERBOOK_ENDPOINT, category, symbol)

	resp, err := makeRequest(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	var orderbook OrderbookResponse
	if err := json.NewDecoder(resp.Body).Decode(&orderbook); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	if orderbook.RetCode != 0 {
		return nil, fmt.Errorf("API –æ—à–∏–±–∫–∞: %s", orderbook.RetMsg)
	}

	return &orderbook, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
func getTicker(symbol string, category string) (*TickerResponse, error) {
	url := fmt.Sprintf("%s%s?category=%s&symbol=%s", 
		BYBIT_API_BASE, TICKER_ENDPOINT, category, symbol)

	resp, err := makeRequest(url)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer resp.Body.Close()

	var ticker TickerResponse
	if err := json.NewDecoder(resp.Body).Decode(&ticker); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	if ticker.RetCode != 0 {
		return nil, fmt.Errorf("API –æ—à–∏–±–∫–∞: %s", ticker.RetMsg)
	}

	return &ticker, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ bid –æ—Ä–¥–µ—Ä–æ–≤ (–∑–µ–ª—ë–Ω—ã–π —Å—Ç–∞–∫–∞–Ω)
func calculateAverageFromBids(bids [][]string, count int) (float64, error) {
	if len(bids) == 0 {
		return 0, fmt.Errorf("–Ω–µ—Ç bid –æ—Ä–¥–µ—Ä–æ–≤")
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ –æ—Ç 4 –¥–æ 6, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏
	if count < 4 {
		count = 4
	}
	if count > 6 || count > len(bids) {
		count = len(bids)
		if count > 6 {
			count = 6
		}
	}

	var sum float64
	var validCount int

	fmt.Printf("\nüìä –ê–Ω–∞–ª–∏–∑ bid –æ—Ä–¥–µ—Ä–æ–≤ (–∑–µ–ª—ë–Ω—ã–π —Å—Ç–∞–∫–∞–Ω):\n")
	for i := 0; i < count && i < len(bids); i++ {
		if len(bids[i]) >= 2 {
			price, err := strconv.ParseFloat(bids[i][0], 64)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã %s: %v", bids[i][0], err)
				continue
			}
			volume, _ := strconv.ParseFloat(bids[i][1], 64)
			fmt.Printf("   %d. –¶–µ–Ω–∞: %s | –û–±—ä—ë–º: %.6f\n", i+1, bids[i][0], volume)
			sum += price
			validCount++
		}
	}

	if validCount == 0 {
		return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Ü–µ–Ω—É")
	}

	average := sum / float64(validCount)
	fmt.Printf("\nüíπ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ %d bid –æ—Ä–¥–µ—Ä–∞–º: %.8f\n", validCount, average)
	return average, nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–∞ USD/RUB —á–µ—Ä–µ–∑ BTC
func calculateCrossRate() {
	fmt.Println("\nüîÑ –†–∞—Å—á—ë—Ç –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–∞ USD/RUB —á–µ—Ä–µ–∑ BTC...")

	// –ü–æ–ª—É—á–∞–µ–º BTC/USDT
	btcUsdt, err := getOrderbook("BTCUSDT", "spot")
	if err != nil {
		fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BTC/USDT: %v\n", err)
		return
	}

	if len(btcUsdt.Result.Bids) >= 4 {
		avgBtcUsd, err := calculateAverageFromBids(btcUsdt.Result.Bids, 5)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ BTC/USD: %v\n", err)
			return
		}

		fmt.Printf("\nüìà BTC/USD —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $%.2f\n", avgBtcUsd)
		fmt.Printf("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ RUB/USD –Ω—É–∂–µ–Ω –∫—É—Ä—Å BTC/RUB –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n")
		fmt.Printf("   –§–æ—Ä–º—É–ª–∞: USD/RUB = (BTC/USD) / (BTC/RUB)\n")

		rubBtc, err := getOrderbook("RUBBTC", "spot")
		if err != nil {
			fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å RUB/BTC: %v\n", err)
			return
		}

		// if len(rubBtc.Result.Bids) >= 4 {
		// 	avgBtcRub, err := calculateAverageFromBids(rubBtc.Result.Bids, 5)
		// 	if err != nil {
		// 		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ : %v\n", err)
		// 		return
		// 	}
		// }

		fmt.Printf("\nüìä –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã (–Ω–∞ –æ—Å–Ω–æ–≤–µ USD/RUB ‚âà 83):\n")
		fmt.Printf("   BTC/RUB ‚âà ‚ÇΩ%.0f\n", rubBtc)
		// fmt.Printf("   USD/RUB ‚âà ‚ÇΩ%.2f\n", estimatedUsdRub)
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ RUB/USD
func GetRubToUsdRate() {
	fmt.Println("üîç –ü–æ–∏—Å–∫ RUB —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –Ω–∞ Bybit...")

	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ RUB –ø–∞—Ä—ã
	rubPairs, err := findRubPairs()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: %v\n", err)
		fmt.Println("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ä...")
	} else {
		fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ RUB –ø–∞—Ä: %d\n", len(rubPairs))
		for _, pair := range rubPairs {
			fmt.Printf("   - %s\n", pair)
		}
	}

	fmt.Println("\n" + strings.Repeat("=", 50))

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	testSymbols := []string{
		"USDTRUB", "RUBUSDT", "USDCRUB", "RUBUSDC", 
		"EURUSDT", // –¥–ª—è –∫—Ä–æ—Å—Å-–∫—É—Ä—Å–∞
	}

	var found bool

	for _, symbol := range testSymbols {
		fmt.Printf("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º %s...\n", symbol)

		// –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å orderbook
		orderbook, err := getOrderbook(symbol, "spot")
		if err != nil {
			fmt.Printf("  ‚ùå Orderbook: %v\n", err)
			continue
		}

		fmt.Printf("  ‚úÖ Orderbook –Ω–∞–π–¥–µ–Ω!\n")
		fmt.Printf("     Bid –æ—Ä–¥–µ—Ä–æ–≤: %d\n", len(orderbook.Result.Bids))
		fmt.Printf("     Ask –æ—Ä–¥–µ—Ä–æ–≤: %d\n", len(orderbook.Result.Asks))

		if len(orderbook.Result.Bids) >= 4 {
			avgRate, err := calculateAverageFromBids(orderbook.Result.Bids, 5)
			if err != nil {
				fmt.Printf("  ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: %v\n", err)
				continue
			}

			fmt.Printf("\nüéØ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω –∫—É—Ä—Å –¥–ª—è %s\n", symbol)
			fmt.Printf("üìà –°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –ø–æ bid –æ—Ä–¥–µ—Ä–∞–º: %.8f\n", avgRate)

			// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			if strings.Contains(symbol, "USDT") && strings.Contains(symbol, "RUB") {
				if strings.HasPrefix(symbol, "RUB") {
					fmt.Printf("üí± –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: 1 RUB = %.8f USDT\n", avgRate)
					fmt.Printf("üí± –ò–ª–∏: 1 USD ‚âà %.2f RUB\n", 1.0/avgRate)
				} else {
					fmt.Printf("üí± –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç: 1 USDT = %.2f RUB\n", avgRate)
					fmt.Printf("üí± –ò–ª–∏: 1 RUB = %.8f USD\n", 1.0/avgRate)
				}
			}

			found = true
			break
		}
	}

	if !found {
		fmt.Println("\n‚ùå –ü—Ä—è–º—ã–µ RUB/USD –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ orderbook")
		fmt.Println("\nüîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
		calculateCrossRate()

		fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
		fmt.Println("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ P2P —Ç–æ—Ä–≥–æ–≤–ª—é Bybit –¥–ª—è RUB/USDT")
		fmt.Println("   2. –ü–æ–ª—É—á–∏—Ç–µ –∫—É—Ä—Å —Å –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–¶–ë –†–§, Forex)")
		fmt.Println("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–æ—Å—Å-–∫—É—Ä—Å —á–µ—Ä–µ–∑ EUR –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã")
	}

	fmt.Printf("\n‚è∞ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω: %s\n", time.Now().Format("2006-01-02 15:04:05"))
}
